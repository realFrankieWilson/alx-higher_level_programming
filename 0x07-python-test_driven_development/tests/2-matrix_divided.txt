DOCUMENTATION ON MATRIX PROJECT.
================================

Description:
************

Module name:
------------
2-matrix_divided.py

Module Prototype:
-----------------
def matrix_divided(matrix, div):

Where:
______
		matrix->	Is a list of integers to work with.
					Matrix is a 2-D array.
					Must be list lists of integers or float
						Otherwise raises a TypeError Message
					Each Row of the matrix must be of the same size.
					    Otherwise: Raises TypeError measage

		div->		Div is the argument we pass to divide each element of the
					array.
					Div must be an integer, or float.
						Otherwise: raises a TypeError message.
					Must be Not be zero(0)
						Otherwise: raises a ZeroDivisionError.

		General ->	The div argument is used to divide all element of the
					Matrix argument.
					The Return value is rounded to 2 decimal places.
					It Returns a new matrix.


Usage and Program Behaviour:
****************************

Module importation:
+++++++++++++++++++

Test # 01: The Module must be imported before usage.

				>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

The driver code aka main code:
------------------------------
The code can be run both interatively and otherwise
The below examples / tests are done using the python3
interative terminal.

Program Behaviour / tests:
-----------------

The matrix list of lists:
------------------------
>>> matrix = [
...     [1, 2, 3],
...     [4, 5, 6]
... ]


Testing The Divisor:
====================
case #02: Test with correct parameters:
.......................................
		>>> matrix_divided(matrix, 2)
		[[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

case #03: Test with a negative divisor:
.......................................
		>> matrix_divided(matrix, -20)
		[[-0.05, -0.1, -0.15], [-0.2, -0.25, -0.3]]

case #04: Test With a floating point/float numbers as a divisor:
...............................................................
		>>> matrix_divided(matrix, 2.0)
		[[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

case #05: Testing with a none as the div argument:
..................................................
		>>> matrix_divided(matrix, None)
		Traceback (most recent call last):
		TypeError: div must be a number

case #06: Testing with a string as the div argument:
....................................................
		>>> matrix_divided(matrix, 'hello')
		Traceback (most recent call last):
		TypeError: div must be a number

case #07: Testing with an infinity number as the div argument:
..............................................................
		>>> matrix_divided(matrix, 1e000)
		[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

case #08: Testing wth a list as the div argument:
..................................................................
		>>> matrix_divided(matrix, [1, 2, 3])
		Traceback (most recent call last):
		TypeError: div must be a number

case #09: Testing with a matrix as the div argument:
....................................................
		>>> matrix_divided(matrix, [[1, 2, 3], [1, 2, 3]])
		Traceback (most recent call last):
		TypeError: div must be a number

case #10: Testing with a div == 0:
..................................
		>>> matrix_divided(matrix, 0)
		Traceback (most recent call last):
		ZeroDivisionError: division by zero


Testing with the Matrix arguments:
==================================
case #11 & #12: Testing with a float lists:
.....................................
		>>> matrix = [
		...     [1.5, 2.5, 5.8],
		...     [52, 3.5, 5.0]
		... ]
		>>> matrix_divided(matrix, 5)
		[[0.3, 0.5, 1.16], [10.4, 0.7, 1.0]]

case #13 & #14: Passing a negative integers to the matrix:
...................................................
		>>> matrix = [[1, -5, -8], [-8, -0, -10]]
		>>> matrix_divided(matrix, 5)
		[[0.2, -1.0, -1.6], [-1.6, 0.0, -2.0]]

case #15 & #16: passing a single list(none metrix):
.............................................
		>>> matrix = [1, -5, -8]
		>>> matrix_divided(matrix, 5)
		Traceback (most recent call last):
		TypeError: matrix must be a matrix (list of lists) of integers/floats

case #16 & #17: passing a matrix with different length:
......................................................
		>>> matrix = [[1, -5, -8], [-8, -0]]
		>>> matrix_divided(matrix, 5)
		Traceback (most recent call last):
		TypeError: Each row of the matrix must have the same size

case #17 & #18: Testing lists of integers and float withing rows:
................................................................
		>>> matrix = [[1, -5, -8, [5, 2]], [-8, -0, [5, 9, 8.8]]]
		>>> matrix_divided(matrix, 5)
		Traceback (most recent call last):
		TypeError: matrix must be a matrix (list of lists) of integers/floats

case #19 & #20: Testing for strings:
		..................................
		>>> matrix = 'Hello', 'i am Frank'
		>>> matrix_divided(matrix, 5)
		Traceback (most recent call last):
		TypeError: matrix must be a matrix (list of lists) of integers/floats

case #21 & #22: Testing for matrix containing strings:
....................................................
		>>> matrix = [[1, 2, 3], [1, 2, 3], ['hello', 1, 5]]
		>>> matrix_divided(matrix, 5)
		Traceback (most recent call last):
		TypeError: matrix must be a matrix (list of lists) of integers/floats

case #23 & #24: Testing for an Empty matrix:
............................................
		>>> matrix = [[], [], []]
		>>> matrix_divided(matrix, 5)
		[[], [], []]

case #25 & #26: Testing for an empty list:
..........................................
		>>> matrix = []
		>>> matrix_divided(matrix, 5)
		[]


Others:
=======
case #27: Checking for type
...........................
		>>> type(matrix_divided(matrix, 5))
		<class 'list'>

case #28: passing no argument to the function:
		>>> matrix_divided()
		Traceback (most recent call last):
		TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
